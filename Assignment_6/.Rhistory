df3$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",df3$variable)
knitr::opts_chunk$set(echo = TRUE)
#install any of these you might not have already
library(ggplot2)
library(edgeR)
library(reshape)
library(GenomicRanges)
library(csaw)
library(Biostrings)
#download the data
atacSeqData = read.table(textConnection(readLines(gzcon(url("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE148nnn/GSE148175/suppl/GSE148175_count_matrix_raw_atac_BRM014_ACBI1.csv.gz")))),
sep=",", stringsAsFactors = FALSE, header = TRUE)
#create a sample metadata data.frame
samples = data.frame(ID = names(atacSeqData)[2:ncol(atacSeqData)])
samples$replicate = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\1",samples$ID)
samples$timeName = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\2",samples$ID)
samples$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",samples$ID)
samples$treatment[samples$treatment=="N"]="BRM014"
samples$time= as.numeric(gsub("[a-z]*","",samples$timeName))
samples$time[grepl("min",samples$timeName)]=samples$time[grepl("min",samples$timeName)]/60
#here, if the point is there, it means such a sample exists, if absent it means that there is no such sample
#ggplot(data = sameMapped, aes(x=start_ori, y=start_nonDet)) +
#geom_point(color="steelblue") +
#facet_wrap(~ chr_ori)
ggplot(data =samples, aes(x=time, y = treatment))+
geom_point()+
facet_wrap(~replicate)
# there are many ways you could do this; one of which is using the melt/cast functions from reshape
df<-melt(atacSeqData)
df$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",df$variable)
df2 <- aggregate(df$value, list(df$treatment), sum)
colnames(df2) <- c("treatment", "reads")
ggplot(data =df2, aes(x=treatment, y = reads))+
geom_point()
max(df2$reads)
min(df2$reads)
differenc <- max(df2$treatment) - min(df2$treatment)
knitr::opts_chunk$set(echo = TRUE)
#install any of these you might not have already
library(ggplot2)
library(edgeR)
library(reshape)
library(GenomicRanges)
library(csaw)
library(Biostrings)
#download the data
atacSeqData = read.table(textConnection(readLines(gzcon(url("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE148nnn/GSE148175/suppl/GSE148175_count_matrix_raw_atac_BRM014_ACBI1.csv.gz")))),
sep=",", stringsAsFactors = FALSE, header = TRUE)
#create a sample metadata data.frame
samples = data.frame(ID = names(atacSeqData)[2:ncol(atacSeqData)])
samples$replicate = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\1",samples$ID)
samples$timeName = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\2",samples$ID)
samples$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",samples$ID)
samples$treatment[samples$treatment=="N"]="BRM014"
samples$time= as.numeric(gsub("[a-z]*","",samples$timeName))
samples$time[grepl("min",samples$timeName)]=samples$time[grepl("min",samples$timeName)]/60
#here, if the point is there, it means such a sample exists, if absent it means that there is no such sample
#ggplot(data = sameMapped, aes(x=start_ori, y=start_nonDet)) +
#geom_point(color="steelblue") +
#facet_wrap(~ chr_ori)
ggplot(data =samples, aes(x=time, y = treatment))+
geom_point()+
facet_wrap(~replicate)
# there are many ways you could do this; one of which is using the melt/cast functions from reshape
df<-melt(atacSeqData)
df$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",df$variable)
df2 <- aggregate(df$value, list(df$treatment), sum)
colnames(df2) <- c("treatment", "reads")
ggplot(data =df2, aes(x=treatment, y = reads))+
geom_point()
max(df2$reads)
min(df2$reads)
differenc <- max(df2$treatment) - min(df2$treatment)
View(df2)
differenc <- max(df2$reads) - min(df2$reads)
perc <- differenc/min(df2$treatment) * 100
differenc <- max(df2$reads) - min(df2$reads)
perc <- differenc/min(df2$reads) * 100
perc
df3<-melt(atacSeqData)
df3$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",df3$variable)
stuff <- filter(df3, treatment == "BI_protac" | treatment == "control")
max(df2$reads)
differenc <- max(df2$reads) - min(df2$reads)
perc <- differenc/min(df2$reads) * 100
perc
(max(readCoverage$reads)-min(readCoverage$reads))/min(readCoverage$reads)*100
differenc <- max(df2$reads) - min(df2$reads)
perc <- differenc/min(df2$reads) * 100
perc
knitr::opts_chunk$set(echo = TRUE)
#install any of these you might not have already
library(ggplot2)
library(edgeR)
library(reshape)
library(GenomicRanges)
library(csaw)
library(Biostrings)
#download the data
atacSeqData = read.table(textConnection(readLines(gzcon(url("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE148nnn/GSE148175/suppl/GSE148175_count_matrix_raw_atac_BRM014_ACBI1.csv.gz")))),
sep=",", stringsAsFactors = FALSE, header = TRUE)
#create a sample metadata data.frame
samples = data.frame(ID = names(atacSeqData)[2:ncol(atacSeqData)])
samples$replicate = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\1",samples$ID)
samples$timeName = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\2",samples$ID)
samples$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",samples$ID)
samples$treatment[samples$treatment=="N"]="BRM014"
samples$time= as.numeric(gsub("[a-z]*","",samples$timeName))
samples$time[grepl("min",samples$timeName)]=samples$time[grepl("min",samples$timeName)]/60
#here, if the point is there, it means such a sample exists, if absent it means that there is no such sample
ggplot(data =samples, aes(x=time, y = treatment))+
geom_point()+
facet_wrap(~replicate)
# there are many ways you could do this; one of which is using the melt/cast functions from reshape
meltedSeqData<-melt(atacSeqData)
meltedSeqData$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",meltedSeqData$variable)
readCoverage <- aggregate(df$value, list(meltedSeqData$treatment), sum)
colnames(readCoverage) <- c("treatment", "reads")
ggplot(data =readCoverage, aes(x=treatment, y = reads))+
geom_point()
max(df2$treatment)
min(df2$treatment)
(max(readCoverage$reads)-min(readCoverage$reads))/min(readCoverage$reads)*100
downsampledSeqData<-meltedSeqData[meltedSeqData$treatment == "BI_protac" | meltedSeqData$treatment == "control", ]
library(edgeR)
protac_reads <- downsampledSeqData[downsampledSeqData$treatment == "BI_protac", ]
control_reads <- downsampledSeqData[downsampledSeqData$treatment == "control", ]
CPM_protac <- cpm(protac_reads$value)
CPM_control <- cpm(control_reads$value)
protac_density <- density(CPM_protac)
control_density <- density(CPM_control)
plot(protac_density, type = "l", col = "red")
lines(control_density,col="blue")
legend( x = "topright", legend=c("control", "BI_protac"),
col=c("blue", "red"), pch=c("-","-"))
plot(density(log(CPM_protac+1)), type = "l", col = "red")
lines(density(log(CPM_control+1)), col = "blue")
legend( x = "topright", legend=c("control", "BI_protac"),
col=c("blue", "red"), pch=c("-","-"))
largeCPM <- df3[cpm(df3$value) > 400, ]
knitr::opts_chunk$set(echo = TRUE)
#install any of these you might not have already
library(ggplot2)
library(edgeR)
library(reshape)
library(GenomicRanges)
library(csaw)
library(Biostrings)
#download the data
atacSeqData = read.table(textConnection(readLines(gzcon(url("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE148nnn/GSE148175/suppl/GSE148175_count_matrix_raw_atac_BRM014_ACBI1.csv.gz")))),
sep=",", stringsAsFactors = FALSE, header = TRUE)
#create a sample metadata data.frame
samples = data.frame(ID = names(atacSeqData)[2:ncol(atacSeqData)])
samples$replicate = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\1",samples$ID)
samples$timeName = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\2",samples$ID)
samples$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",samples$ID)
samples$treatment[samples$treatment=="N"]="BRM014"
samples$time= as.numeric(gsub("[a-z]*","",samples$timeName))
samples$time[grepl("min",samples$timeName)]=samples$time[grepl("min",samples$timeName)]/60
#here, if the point is there, it means such a sample exists, if absent it means that there is no such sample
ggplot(data =samples, aes(x=time, y = treatment))+
geom_point()+
facet_wrap(~replicate)
# there are many ways you could do this; one of which is using the melt/cast functions from reshape
meltedSeqData<-melt(atacSeqData)
meltedSeqData$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",meltedSeqData$variable)
readCoverage <- aggregate(df$value, list(meltedSeqData$treatment), sum)
library(edgeR)
protac_reads <- downsampledSeqData[downsampledSeqData$treatment == "BI_protac", ]
# there are many ways you could do this; one of which is using the melt/cast functions from reshape
meltedSeqData<-melt(atacSeqData)
meltedSeqData$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",meltedSeqData$variable)
readCoverage <- aggregate(meltedSeqData$value, list(meltedSeqData$treatment), sum)
colnames(readCoverage) <- c("treatment", "reads")
ggplot(data =readCoverage, aes(x=treatment, y = reads))+
geom_point()
knitr::opts_chunk$set(echo = TRUE)
#install any of these you might not have already
library(ggplot2)
library(edgeR)
library(reshape)
library(GenomicRanges)
library(csaw)
library(Biostrings)
#download the data
atacSeqData = read.table(textConnection(readLines(gzcon(url("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE148nnn/GSE148175/suppl/GSE148175_count_matrix_raw_atac_BRM014_ACBI1.csv.gz")))),
sep=",", stringsAsFactors = FALSE, header = TRUE)
#create a sample metadata data.frame
samples = data.frame(ID = names(atacSeqData)[2:ncol(atacSeqData)])
samples$replicate = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\1",samples$ID)
samples$timeName = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\2",samples$ID)
samples$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",samples$ID)
samples$treatment[samples$treatment=="N"]="BRM014"
samples$time= as.numeric(gsub("[a-z]*","",samples$timeName))
samples$time[grepl("min",samples$timeName)]=samples$time[grepl("min",samples$timeName)]/60
#here, if the point is there, it means such a sample exists, if absent it means that there is no such sample
ggplot(data =samples, aes(x=time, y = treatment))+
geom_point()+
facet_wrap(~replicate)
# there are many ways you could do this; one of which is using the melt/cast functions from reshape
meltedSeqData<-melt(atacSeqData)
meltedSeqData$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",meltedSeqData$variable)
readCoverage <- aggregate(meltedSeqData$value, list(meltedSeqData$treatment), sum)
colnames(readCoverage) <- c("treatment", "reads")
ggplot(data =readCoverage, aes(x=treatment, y = reads))+
geom_point()
max(df2$treatment)
max(meltedSeqData$treatment)
min(meltedSeqData$treatment)
(max(readCoverage$reads)-min(readCoverage$reads))/min(readCoverage$reads)*100
downsampledSeqData<-meltedSeqData[meltedSeqData$treatment == "BI_protac" | meltedSeqData$treatment == "control", ]
library(edgeR)
protac_reads <- downsampledSeqData[downsampledSeqData$treatment == "BI_protac", ]
control_reads <- downsampledSeqData[downsampledSeqData$treatment == "control", ]
CPM_protac <- cpm(protac_reads$value)
CPM_control <- cpm(control_reads$value)
View(protac_reads)
protac_density <- density(CPM_protac)
control_density <- density(CPM_control)
plot(protac_density, type = "l", col = "red")
lines(control_density,col="blue")
legend( x = "topright", legend=c("control", "BI_protac"),
col=c("blue", "red"), pch=c("-","-"))
View(protac_density)
largeCPM <- df3[cpm(df3$value) > 400, ]
largeCPM <- downsampledSeqData[cpm(downsampledSeqData$value) > 400, ]
View(downsampledSeqData)
View(largeCPM)
View(downsampledSeqData)
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData <- dplyr::filter(filteredData, !grepl('chrM', region))
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData <- dplyr::filter(filteredData, !grepl('chrM', region))
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData <- dplyr::filter(filteredData, !grepl('chrM.*', region))
View(downsampledSeqData)
filteredData %>% dplyr::filter(filteredData, !grepl('chrM.*', region))
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData %>%
dplyr::filter(filteredData, !grepl('chrM.*', region))
library(tidyverse)
library(tidyverse)
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData %>%
dplyr::filter(filteredData, !grepl('chrM.*', region))
filteredData %>%
filter(str_detect(region, 'chrM'))
View(filteredData)
library(tidyverse)
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData %>%
filter(str_detect(region, 'chrM'))
View(filteredData)
View(filteredData)
library(tidyverse)
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData %>% filter(!str_detect(region, 'chrM'))
View(filteredData)
library(tidyverse)
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData <- filteredData %>% filter(!str_detect(region, 'chrM'))
#assuming peak is a number in value, i might be wrong TODO: Alice please check
sum(downsampledSeqData$value)
sum(filteredData$value)
#assuming peak is a number in value, i might be wrong TODO: Alice please check
print(sum(downsampledSeqData$value))
sum(filteredData$value)
knitr::opts_chunk$set(echo = TRUE)
#install any of these you might not have already
library(ggplot2)
library(edgeR)
library(reshape)
library(GenomicRanges)
library(csaw)
library(Biostrings)
#download the data
atacSeqData = read.table(textConnection(readLines(gzcon(url("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE148nnn/GSE148175/suppl/GSE148175_count_matrix_raw_atac_BRM014_ACBI1.csv.gz")))),
sep=",", stringsAsFactors = FALSE, header = TRUE)
#create a sample metadata data.frame
samples = data.frame(ID = names(atacSeqData)[2:ncol(atacSeqData)])
samples$replicate = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\1",samples$ID)
samples$timeName = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\2",samples$ID)
samples$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",samples$ID)
samples$treatment[samples$treatment=="N"]="BRM014"
samples$time= as.numeric(gsub("[a-z]*","",samples$timeName))
samples$time[grepl("min",samples$timeName)]=samples$time[grepl("min",samples$timeName)]/60
#here, if the point is there, it means such a sample exists, if absent it means that there is no such sample
ggplot(data =samples, aes(x=time, y = treatment))+
geom_point()+
facet_wrap(~replicate)
# there are many ways you could do this; one of which is using the melt/cast functions from reshape
meltedSeqData<-melt(atacSeqData)
meltedSeqData$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",meltedSeqData$variable)
readCoverage <- aggregate(meltedSeqData$value, list(meltedSeqData$treatment), sum)
colnames(readCoverage) <- c("treatment", "reads")
ggplot(data =readCoverage, aes(x=treatment, y = reads))+
geom_point()
max(meltedSeqData$treatment)
min(meltedSeqData$treatment)
(max(readCoverage$reads)-min(readCoverage$reads))/min(readCoverage$reads)*100
downsampledSeqData<-meltedSeqData[meltedSeqData$treatment == "BI_protac" | meltedSeqData$treatment == "control", ]
library(edgeR)
protac_reads <- downsampledSeqData[downsampledSeqData$treatment == "BI_protac", ]
control_reads <- downsampledSeqData[downsampledSeqData$treatment == "control", ]
CPM_protac <- cpm(protac_reads$value)
CPM_control <- cpm(control_reads$value)
protac_density <- density(CPM_protac)
control_density <- density(CPM_control)
plot(protac_density, type = "l", col = "red")
lines(control_density,col="blue")
legend( x = "topright", legend=c("control", "BI_protac"),
col=c("blue", "red"), pch=c("-","-"))
plot(density(log(CPM_protac+1)), type = "l", col = "red")
lines(density(log(CPM_control+1)), col = "blue")
legend( x = "topright", legend=c("control", "BI_protac"),
col=c("blue", "red"), pch=c("-","-"))
largeCPM <- downsampledSeqData[cpm(downsampledSeqData$value) > 400, ]
library(tidyverse)
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData <- filteredData %>% filter(!str_detect(region, 'chrM'))
#assuming peak is a number in value, i might be wrong TODO: Alice please check
print(sum(downsampledSeqData$value))
sum(filteredData$value)
View(filteredData)
View(filteredData)
countMatrix <- dplyr::dcast(filteredData, region~variable)
countMatrix <- dcast(filteredData, region~variable)
library(dplyr)
countMatrix <- dcast(filteredData, region~variable)
library(reshape2)
library(dplyr)
countMatrix <- dcast(filteredData, region~variable)
View(countMatrix)
curSamples = samples[match(names(countMatrix), samples$ID),];
y = DGEList(counts=countMatrix, group=curSamples$treatment)
countMatrix <- as.matrix(countMatrix)
curSamples = samples[match(names(countMatrix), samples$ID),];
y = DGEList(counts=countMatrix, group=curSamples$treatment)
countMatrix[is.na(countMatrix)] <- 0
curSamples = samples[match(names(countMatrix), samples$ID),];
y = DGEList(counts=countMatrix, group=curSamples$treatment)
View(countMatrix)
library(reshape2)
library(dplyr)
countMatrix <- dcast(filteredData, region~variable)
`rownames<-`(countMatrix$region)
rownames<-(countMatrix$region)
countMatrix <- as.matrix(countMatrix)
countMatrix[is.na(countMatrix)] <- 0
library(reshape2)
library(dplyr)
countMatrix <- dcast(filteredData, region~variable)
rownames<-(countMatrix$region)
countMatrix <- as.matrix(countMatrix)
library(dplyr)
countMatrix <- dcast(filteredData, region~variable)
countMatrix <- dcast(filteredData, region~variable)
rownames<-(countMatrix$region)
countMatrix <- subset(countMatrix, select = -region)
countMatrix <- as.matrix(countMatrix)
countMatrix[is.na(countMatrix)] <- 0
curSamples = samples[match(names(countMatrix), samples$ID),];
y = DGEList(counts=countMatrix, group=curSamples$treatment)
-- output of sessionInfo()
--output of sessionInfo()
sessionInfo()
curSamples = samples[match(colnames(countMatrix), samples$ID),];
curSamples = samples[match(colnames(countMatrix), samples$ID),];
y = DGEList(counts=countMatrix, group=curSamples$treatment)
y = calcNormFactors(y)
designPaired = model.matrix(~curSamples$treatment + curSamples$timeName)
# we are using timeName here to make sure that time is treated as a categorical variable. Had we more time points it might make sense to treat time as a value.
y = estimateDisp(y, designPaired)
fitPaired = glmQLFit(y, designPaired)
qlfPairedTime6vs24 = glmQLFTest(fitPaired, coef=3)
qlfPairedTreatControlvsProtac = glmQLFTest(fitPaired, coef=2)
allDEStatsPairedTreatControlvsProtac = as.data.frame(topTags(qlfPairedTreatControlvsProtac,n=nrow(countMatrix)))
allDEStatsPairedTreatControlvsProtac$region=row.names(allDEStatsPairedTreatControlvsProtac)
allDEStatsPairedTime6vs24 = as.data.frame(topTags(qlfPairedTime6vs24,n=nrow(countMatrix)))
allDEStatsPairedTime6vs24$region=row.names(allDEStatsPairedTime6vs24)
View(allDEStatsPairedTreatControlvsProtac)
maPlot(logFC = allDEStatsPairedTreatControlvsProtac$logFC, logAbundance = allDEStatsPairedTreatControlvsProtac$logCPM)
maPlot(logFC = allDEStatsPairedTime6vs24$logFC, logAbundance = allDEStatsPairedTime6vs24$logCPM)
#Note: the Bioconductor package csaw implements loess regularization in a way that is compatible with edgeR
## Tip: use the csaw library to implement the loess regularization
curSamples = samples[match(colnames(countMatrix), samples$ID),]; #some comments are added by Abhishek
y = DGEList(counts=countMatrix, group=curSamples$treatment)
#y = calcNormFactors(y) #Calculate normalization factors to scale the raw library sizes.
y <- normOffsets(y, type="loess", lib.size=full.lib.size)
#y = calcNormFactors(y) #Calculate normalization factors to scale the raw library sizes.
y <- csaw::normOffsets(y, type="loess", lib.size=full.lib.size)
y = calcNormFactors(y) #Calculate normalization factors to scale the raw library sizes.
offset <- csaw::normOffsets(y, type="loess", lib.size=full.lib.size)
y = as.matrix(y)
offset <- csaw::normOffsets(y, type="loess", lib.size=full.lib.size)
knitr::opts_chunk$set(echo = TRUE)
#install any of these you might not have already
library(ggplot2)
library(edgeR)
library(reshape)
library(GenomicRanges)
library(csaw)
library(Biostrings)
#download the data
atacSeqData = read.table(textConnection(readLines(gzcon(url("ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE148nnn/GSE148175/suppl/GSE148175_count_matrix_raw_atac_BRM014_ACBI1.csv.gz")))),
sep=",", stringsAsFactors = FALSE, header = TRUE)
#create a sample metadata data.frame
samples = data.frame(ID = names(atacSeqData)[2:ncol(atacSeqData)])
samples$replicate = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\1",samples$ID)
samples$timeName = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\2",samples$ID)
samples$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",samples$ID)
samples$treatment[samples$treatment=="N"]="BRM014"
samples$time= as.numeric(gsub("[a-z]*","",samples$timeName))
samples$time[grepl("min",samples$timeName)]=samples$time[grepl("min",samples$timeName)]/60
#here, if the point is there, it means such a sample exists, if absent it means that there is no such sample
ggplot(data =samples, aes(x=time, y = treatment))+
geom_point()+
facet_wrap(~replicate)
# there are many ways you could do this; one of which is using the melt/cast functions from reshape
meltedSeqData<-melt(atacSeqData)
meltedSeqData$treatment = gsub("(R[12])_([0-9]+[minh]+)_(.*)$","\\3",meltedSeqData$variable)
readCoverage <- aggregate(meltedSeqData$value, list(meltedSeqData$variable), sum)
colnames(readCoverage) <- c("treatment", "reads")
ggplot(data =readCoverage, aes(x=treatment, y = reads))+
geom_point()
readCoverage[which.max(readCoverage$reads),]
readCoverage[which.min(readCoverage$reads),]
(max(readCoverage$reads)-min(readCoverage$reads))/min(readCoverage$reads)*100
downsampledSeqData<-meltedSeqData[meltedSeqData$treatment == "BI_protac" | meltedSeqData$treatment == "control", ]
library(edgeR)
protac_reads <- downsampledSeqData[downsampledSeqData$treatment == "BI_protac", ]
control_reads <- downsampledSeqData[downsampledSeqData$treatment == "control", ]
readCoverageProtac <- aggregate(protac_reads$value, list(protac_reads$variable), sum)
readCoverageControl <- aggregate(control_reads$value, list(control_reads$variable), sum)
protac_reads_R1_24 <- downsampledSeqData[downsampledSeqData$variable == "R1_24h_BI_protac", ]
control_reads_R1_24 <- downsampledSeqData[downsampledSeqData$variable == "R1_24h_control", ]
protac_reads_R1_6 <- downsampledSeqData[downsampledSeqData$variable == "R1_6h_BI_protac", ]
control_reads_R1_6 <- downsampledSeqData[downsampledSeqData$variable == "R1_6h_control", ]
protac_reads_R2_24 <- downsampledSeqData[downsampledSeqData$variable == "R2_24h_BI_protac", ]
control_reads_R2_24 <- downsampledSeqData[downsampledSeqData$variable == "R2_24h_control", ]
protac_reads_R2_6 <- downsampledSeqData[downsampledSeqData$variable == "R1_6h_BI_protac", ]
control_reads_R2_6 <- downsampledSeqData[downsampledSeqData$variable == "R1_6h_control", ]
CPM_protac_R1_24 <- cpm(protac_reads_R1_24$value)
CPM_control_R1_24 <- cpm(control_reads_R1_24$value)
CPM_protac_R1_6 <- cpm(protac_reads_R1_6$value)
CPM_control_R1_6 <- cpm(control_reads_R1_6$value)
CPM_protac_R2_24 <- cpm(protac_reads_R2_24$value)
CPM_control_R2_24 <- cpm(control_reads_R2_24$value)
CPM_protac_R2_6 <- cpm(protac_reads_R1_6$value)
CPM_control_R2_6 <- cpm(control_reads_R1_6$value)
readCoverageProtac$CPM_protac <- readCoverageProtac$x/1000000
readCoverageControl$CPM_control <- readCoverageControl$x/1000000
protac_densityR1_24 <- density(CPM_protac_R1_24)
control_densityR1_24 <- density(CPM_control_R1_24)
protac_densityR1_6 <- density(CPM_protac_R1_6)
control_densityR1_6 <- density(CPM_control_R1_6)
protac_densityR2_24 <- density(CPM_protac_R2_24)
control_densityR2_24 <- density(CPM_control_R2_24)
protac_densityR2_6 <- density(CPM_protac_R2_6)
control_densityR2_6 <- density(CPM_control_R2_6)
plot(protac_densityR1_24, type = "l", col = "red")
lines(control_densityR1_24,col="blue")
lines(protac_densityR1_6, col = "green")
lines(control_densityR1_6, col = "orange")
lines(protac_densityR2_24, col = "pink")
lines(control_densityR2_24, col = "yellow")
lines(protac_densityR2_6, col = "purple")
lines(control_densityR2_6, col = "black")
legend( x = "topright", legend=c("control_R1_24", "BI_protac_R1_24", "control_R1_6", "control_R1_6", "control_R2_24", "BI_protac_R2_24", "control_R2_6", "control_R2_6"),
col=c("blue", "red", "green", "orange", "pink", "yellow", "purple", "black"), pch=c("-","-", "-","-", "-","-", "-","-"))
plot(density(log(CPM_protac_R1_24+1)), type = "l", col = "red")
lines(density(log(CPM_control_R1_24+1)),col="blue")
lines(density(log(CPM_protac_R1_6+1)), col = "green")
lines(density(log(CPM_control_R1_6+1)), col = "orange")
lines(density(log(CPM_protac_R1_6+1)), col = "pink")
lines(density(log(CPM_control_R1_6+1)), col = "yellow")
lines(density(log(CPM_protac_R1_6+1)), col = "purple")
lines(density(log(CPM_control_R1_6+1)), col = "black")
legend( x = "topright", legend=c("control_R1_24", "BI_protac_R1_24", "control_R1_6", "control_R1_6", "control_R2_24", "BI_protac_R2_24", "control_R2_6", "control_R2_6"),
col=c("blue", "red", "green", "orange", "pink", "yellow", "purple", "black"), pch=c("-","-", "-","-", "-","-", "-","-"))
largeCPM <- downsampledSeqData[cpm(downsampledSeqData$value) > 400, ]
df <- data.frame(CPM_control_R1_24, CPM_protac_R1_24, CPM_control_R1_6, CPM_protac_R1_6, CPM_control_R2_24, CPM_protac_R2_24, CPM_control_R2_6, CPM_protac_R2_6)
corr_mat <- cor(df)
melted_cormat <- melt(corr_mat)
ggplot(data = melted_cormat, aes(x=X1, y=X2, fill=value)) + theme(text = element_text(size=10), axis.text.x = element_text(angle=90, hjust=1)) +
geom_tile()
library(tidyverse)
filteredData <- downsampledSeqData[downsampledSeqData$value > 10,]
filteredData <- filteredData %>% filter(!str_detect(region, 'chrM'))
#assuming peak is a number in value, i might be wrong TODO: Alice please check
print(sum(downsampledSeqData$value))
sum(filteredData$value)
library(reshape2)
library(dplyr)
countMatrix <- dcast(filteredData, region~variable)
rownames<-(countMatrix$region)
countMatrix <- subset(countMatrix, select = -region)
countMatrix <- as.matrix(countMatrix)
countMatrix[is.na(countMatrix)] <- 0
curSamples = samples[match(colnames(countMatrix), samples$ID),]; #some comments are added by Abhishek
y = DGEList(counts=countMatrix, group=curSamples$treatment)
y = calcNormFactors(y) #Calculate normalization factors to scale the raw library sizes.
designPaired = model.matrix(~curSamples$treatment + curSamples$timeName)   #returning a dense or sparse object of class
# we are using timeName here to make sure that time is treated as a categorical variable. Had we more time points it might make sense to treat time as a value.
y = estimateDisp(y, designPaired) #Maximizes the negative binomial likelihood to give the estimate of the common, trended and tagwise dispersions across all tags.
fitPaired = glmQLFit(y, designPaired)
qlfPairedTime6vs24 = glmQLFTest(fitPaired, coef=3)
qlfPairedTreatControlvsProtac = glmQLFTest(fitPaired, coef=2)
allDEStatsPairedTreatControlvsProtac = as.data.frame(topTags(qlfPairedTreatControlvsProtac,n=nrow(countMatrix)))
allDEStatsPairedTreatControlvsProtac$region=row.names(allDEStatsPairedTreatControlvsProtac)
allDEStatsPairedTime6vs24 = as.data.frame(topTags(qlfPairedTime6vs24,n=nrow(countMatrix)))
allDEStatsPairedTime6vs24$region=row.names(allDEStatsPairedTime6vs24)
