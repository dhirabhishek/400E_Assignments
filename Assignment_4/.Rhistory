# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
# print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
# print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
# print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(NROW((table_chrs1)))
print(NROW((table_chrs2)))
# print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
# print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(NCOL((table_chrs1)))
print(ncol((table_chrs2)))
# print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
# print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(NCOL((table_chrs1)))
print(head((table_chrs2)))
# print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
# print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(NCOL((table_chrs1)))
print(head((chr_subset)))
# print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
View(bed)
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
# print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(NCOL((table_chrs1)))
print(head((chr_subset)))
# print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
View(bed)
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
# print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(NCOL((table_chrs1)))
print(head((chr_subset)))
# print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
# print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(nrow((table_chrs1)))
print(head((chr_subset)))
# print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
# print(head(canonical_chromosomes))
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
print(head(chr_subset))
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(((table_chrs1)))
print(head((chr_subset)))
# print(head(table_chrs1))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet"))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(ncol(table_chrs1))
print(ncol(table_chrs2))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(nrow(table_chrs1))
print(nrow(table_chrs2))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(nrow(names(table_chrs1)))
print(nrow(names(table_chrs2)))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(ncol(names(table_chrs1)))
print(ncol(names(table_chrs2)))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((names(table_chrs1)))
print((names(table_chrs2)))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((names(canonical_chromosomes)))
print((names(table_chrs2)))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print(((canonical_chromosomes)))
print((names(table_chrs2)))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
reads.per.chr(bed, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
View(bed)
