stuff <- reads.per.chr(bed2, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
print("stuff")
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
print("stuff")
compare.df <- melt(compare.df)
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
print("stuff")
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
print("stuff")
colnames(compare.df) <- c("Chr",paste(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("hg38","redo"), c("hg19","noDet")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
print("stuff")
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("hg38"), c("hg19")) # stuff is not working
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
print("stuff")
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("hg38"), c("hg19")) # stuff is not working
install.packages('reshape2')
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
print("stuff")
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("hg38"), c("hg19")) # stuff is not working
library(reshape2)
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
print("stuff")
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("hg38"), c("hg19")) # stuff is not working
print(head(stuff))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
print("stuff")
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("original"), c("redo")) # stuff is not working
print(head(stuff))
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
print("stuff")
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
stuff <- reads.per.chr(bed2, c(2,6), c("original"), c("redo")) # stuff is not working
print((stuff))
View(stuff)
barplot(stuff)
barplot(stuff$value)
View(stuff)
barplot(stuff, beside = TRUE)
type(stuff)
typeof(stuff)
mStuff <- matrix(unlist(stuff), ncol = 3, nrow = 44)
barplot(mstuff)
barplot(mStuff)
barplot(mStuff, beside = TRUE)
barplot(t(mStuff), beside = TRUE)
barplot(t(mStuff), beside = TRUE, col = c("red", "green"))
ggplot(mStuff, aes(x = value, fill = variable))
install.packages("ggplot2")
library(ggplot2)
ggplot(mStuff, aes(x = value, fill = variable))
ggplot(stuff, aes(x = value, fill = variable))
ggplot(stuff, aes(x = value, fill = variable)) + geom_bar()
ggplot(stuff, aes(x = Chr, fill = variable)) + geom_bar()
ggplot(stuff, aes(x = Chr, fill = value)) + geom_bar()
ggplot(stuff, aes(x = Chr, fill = variable))
ggplot(stuff, aes(x = Chr, fill = variable)) +
geom_bar(position = position_dodge())
order(stuff$variable)
View(stuff)
order(stuff$Chr)
stuff[order(stuff$Chr),]
ggplot(stuff, aes(x = Chr, fill = variable)) +
geom_bar(position = position_dodge())
ggplot(stuff, aes(x = Chr, fill = value)) +
geom_bar(position = position_dodge())
ggplot(stuff, aes(x = variable, fill = value)) +
geom_bar(position = position_dodge())
View(mStuff)
View(mStuff)
ggplot(stuff, aes(x = Chr, fill = varriable, y = value)) +
geom_bar(position = position_dodge())
ggplot(stuff, aes(x = Chr, fill = variable, y = value)) +
geom_bar(position = position_dodge())
ggplot(stuff, aes(x = Chr, fill = variable, y = value)) +
geom_bar(position = position_dodge(), stat = 'identity')
#?# Load your merged bed file into R using the *read.csv* function and save it into a data.frame
#?# Type the command you used below  - 1pt
bed2 <- read.csv("again_merged.bed", sep = " ", header = FALSE)
## Change the column names of your merged bed data.frame to:
## read_id chr_ori  start_ori  end_ori  strand_ori chr_redo  start_redo  end_redo  strand_redo
#?# Type the command you used below:
colnames(bed2)<-c("read_id", "chr_ori",  "start_ori",  "end_ori",  "strand_ori", "chr_redo",  "start_redo",  "end_redo",  "strand_redo")
#?# Run the reads.per.chr on your genome builds merged bed (previously loaded), specify all the parameters following the instructions of the function, type the command used below: - 1.5 pt
rpc <- reads.per.chr(bed2, c(2,6), c("original"), c("redo"))
#?# How many reads were mapped to two different chromosomes? What percent of reads is this? Type the code and the answers for each below. 2 pt
## Using the output data.frame you got from running the reads.per.chr function on your merged bed, do a barplot that:
## Uses the Chr column for the x-axis
## Useds the value (number of reads) column for the y-axis
## Uses the variable (conditions, also known as different runs in this case) column to "fill in" the color
## Each condition must have their own bar, they shouldn't be stacked!!
#?# Type the command you used below: - 1.5 pt
ggplot(rpc, aes(x = Chr, fill = variable, y = value)) +
+     geom_bar(position = position_dodge(), stat = 'identity')
#?# Load your merged bed file into R using the *read.csv* function and save it into a data.frame
#?# Type the command you used below  - 1pt
bed2 <- read.csv("again_merged.bed", sep = " ", header = FALSE)
## Change the column names of your merged bed data.frame to:
## read_id chr_ori  start_ori  end_ori  strand_ori chr_redo  start_redo  end_redo  strand_redo
#?# Type the command you used below:
colnames(bed2)<-c("read_id", "chr_ori",  "start_ori",  "end_ori",  "strand_ori", "chr_redo",  "start_redo",  "end_redo",  "strand_redo")
#?# Run the reads.per.chr on your genome builds merged bed (previously loaded), specify all the parameters following the instructions of the function, type the command used below: - 1.5 pt
rpc <- reads.per.chr(bed2, c(2,6), c("original"), c("redo"))
#?# How many reads were mapped to two different chromosomes? What percent of reads is this? Type the code and the answers for each below. 2 pt
## Using the output data.frame you got from running the reads.per.chr function on your merged bed, do a barplot that:
## Uses the Chr column for the x-axis
## Useds the value (number of reads) column for the y-axis
## Uses the variable (conditions, also known as different runs in this case) column to "fill in" the color
## Each condition must have their own bar, they shouldn't be stacked!!
#?# Type the command you used below: - 1.5 pt
ggplot(rpc, aes(x = Chr, fill = variable, y = value)) +  geom_bar(position = position_dodge(), stat = 'identity')
#?# Do you see differences among the number of reads per chromosome between the two runs? Answer yes or no - 0.5 pt
#No
View(stuff)
View(rpc)
View(bed2)
View(bed)
View(bed)
#?# Go through the function line by line using your merged bed file and your chosen parameters, as if it weren't a function (e.g. set "merged_bed" to the data.frame containing your data, and run each line of the function (you will also need to set the parameters)). Explain in a concise way how each line is changing the data. Use functions like head and tail to visualize the data as it's changing. - 4 pt
#TODO
## reads.per.chr:
# This function takes a merged bed file of two conditions A and B and gives a data.frame of 3 columns: Chr, variable (condition), value (how many reads per chromosome are when using that condition)
## Parameters:
# merged_bed: refers to the bed file you created on the previous section
# cols2compare=c(2,6): default is column 2 versus 6, which if you followed the format specified when you merged the files, they should correspond to the chromosome column of each read for the two conditions (e.g., hg38 and hg19)
# type.a=c("hg38", "redo"): you should specify a string, that states what is condition A. Defaults are "hg38" and "redo"
# type.b=c("hg19", "noDet"): you should specify a string, that states what is condition B. Defaults are "hg19" and "noDet"
#bed <- as.data.frame(read.table("merged.bed",header = FALSE, sep=" ",stringsAsFactors=FALSE, quote=""))
reads.per.chr <- function(merged_bed, cols2compare=c(2,6), type.a=c("hg38", "redo"), type.b=c("hg19", "noDet")){
## Create canonical chromosomes array to filter out contigs and scaffolds for simplicity
canonical_chromosomes <- paste0("chr", 1:22)
## For column 1
chr_subset <- merged_bed[,c(cols2compare[1])]
table_chrs1 <- table(chr_subset)
## For column 2
chr_subset <- merged_bed[,c(cols2compare[2])]
table_chrs2 <- table(chr_subset)
print((length(canonical_chromosomes)))
print(length(names(table_chrs2)))
print(length(names(table_chrs2) %in% canonical_chromosomes))
compare.df <- data.frame(column1=table_chrs1[names(table_chrs1) %in% canonical_chromosomes],
column2=table_chrs2[names(table_chrs2) %in% canonical_chromosomes])
print("stuff")
compare.df <- compare.df[,c(1,2,4)]
print("stuff")
colnames(compare.df) <- c("Chr",paste0(type.a, "_reads"), paste0(type.b, "_reads"))
compare.df <- melt(compare.df)
return(compare.df)
}
#?# Copy the files from the server to your local computer - 1pt
# scp adhir_bmeg22@orca1.bcgsc.ca:/home/adhir_bmeg22/ass4/merged.bed .
#?# Load your merged bed file into R suing the *read.csv* function and save it into a data.frame
#?# Type the command you used below  - 1pt
bed <- read.csv("merged.bed", sep = " ", header = FALSE)
## Change the column names of your merged bed data.frame to:
# read_id  chr_hg38  start_hg38  end_hg38  strand_hg38 chr_hg19  start_hg19  end_hg19  strand_hg19
#?# Type the command you used below:
colnames(bed)<-c("read_id", "chr_hg38",  "start_hg38",  "end_hg38",  "strand_hg38", "chr_hg19",  "start_hg19",  "end_hg19",  "strand_hg19")
## Load the reshape2 library, install it if you don't already have it!
## Tip: Use the "packages" tab on the left bottom screen
library(reshape2)
#?# Run the reads.per.chr on your genome builds merged bed (previously loaded), specify all the parameters following the instructions of the function, type the command used below: - 1.5 pt
rpc1 <- reads.per.chr(bed, c(2,6), c("hg38"), c("hg19"))
#?# How many reads were mapped to two different chromosomes? What percent of reads is this? Type the code and the answers for each below. 2 pt
bed$diff<- ifelse(bed$chr_hg38 == bed$chr_hg19, 0, 1)
## Using the start position of the reads on both genome builds, create a scatterplot using ggplot2 that:
## Has the start in the hg38 genome build in the x-axis
## Has the start in the hg19 genome build in the y-axis
## Plots each chromosome in its own subplot (panel) (e.g. see facet_wrap())
## Plots only cases where both reads mapped to the same chromosome
#?# Type the command you used below: - 3 pt
sameMapped <- bed[bed$diff == 0, ]
ggplot(data = sameMapped, aes(x=start_hg38, y=start_hg19)) +
geom_point(color="steelblue") +
facet_wrap(~ chr_hg38)
print(head(rcp1))
#?# Run the reads.per.chr on your genome builds merged bed (previously loaded), specify all the parameters following the instructions of the function, type the command used below: - 1.5 pt
rpc1 <- reads.per.chr(bed, c(2,6), c("hg38"), c("hg19"))
print(head(rpc1))
#?# Load your merged bed file into R using the *read.csv* function and save it into a data.frame
#?# Type the command you used below  - 1pt
bed2 <- read.csv("again_merged.bed", sep = " ", header = FALSE)
## Change the column names of your merged bed data.frame to:
## read_id chr_ori  start_ori  end_ori  strand_ori chr_redo  start_redo  end_redo  strand_redo
#?# Type the command you used below:
colnames(bed2)<-c("read_id", "chr_ori",  "start_ori",  "end_ori",  "strand_ori", "chr_redo",  "start_redo",  "end_redo",  "strand_redo")
#?# Run the reads.per.chr on your genome builds merged bed (previously loaded), specify all the parameters following the instructions of the function, type the command used below: - 1.5 pt
rpc <- reads.per.chr(bed2, c(2,6), c("original"), c("redo"))
#?# How many reads were mapped to two different chromosomes? What percent of reads is this? Type the code and the answers for each below. 2 pt
bed2$diff<- ifelse(bed2$chr_ori == bed2$chr_redo, 0, 1)
sum(bed2$diff)
# 0 reads were mapped to two different chromosomes, 0%
## Using the output data.frame you got from running the reads.per.chr function on your merged bed, do a barplot that:
## Uses the Chr column for the x-axis
## Useds the value (number of reads) column for the y-axis
## Uses the variable (conditions, also known as different runs in this case) column to "fill in" the color
## Each condition must have their own bar, they shouldn't be stacked!!
#?# Type the command you used below: - 1.5 pt
ggplot(rpc, aes(x = Chr, fill = variable, y = value)) +  geom_bar(position = position_dodge(), stat = 'identity')
library(ggplot2)
ggplot(rpc, aes(x = Chr, fill = variable, y = value)) +  geom_bar(position = position_dodge(), stat = 'identity')
#?# Copy the files from the server to your local computer - 1pt
# scp adhir_bmeg22@orca1.bcgsc.ca:/home/adhir_bmeg22/ass4/merged.bed .
#?# Load your merged bed file into R suing the *read.csv* function and save it into a data.frame
#?# Type the command you used below  - 1pt
bed <- read.csv("merged.bed", sep = " ", header = FALSE)
## Change the column names of your merged bed data.frame to:
# read_id  chr_hg38  start_hg38  end_hg38  strand_hg38 chr_hg19  start_hg19  end_hg19  strand_hg19
#?# Type the command you used below:
colnames(bed)<-c("read_id", "chr_hg38",  "start_hg38",  "end_hg38",  "strand_hg38", "chr_hg19",  "start_hg19",  "end_hg19",  "strand_hg19")
## Load the reshape2 library, install it if you don't already have it!
## Tip: Use the "packages" tab on the left bottom screen
library(reshape2)
#?# Run the reads.per.chr on your genome builds merged bed (previously loaded), specify all the parameters following the instructions of the function, type the command used below: - 1.5 pt
rpc1 <- reads.per.chr(bed, c(2,6), c("hg38"), c("hg19"))
print(head(rpc1))
#?# How many reads were mapped to two different chromosomes? What percent of reads is this? Type the code and the answers for each below. 2 pt
bed$diff<- ifelse(bed$chr_hg38 == bed$chr_hg19, 0, 1)
## Subtract the start position of the original bed from the start position of the redo for all the reads
#?# Type the command used below: - 0.5 pt
bed2$startPosDiff <- bed2$start_redo - bed2$start_ori
## Use the *table* command to tabulate the results from the previous question. Ex. table(a-b)
#?# Type the command you used below: - 0.5 pt
table(bed2$startPosDiff)
#?# What do you see? How many have a non zero difference in position start? - 0.5 pt
# None have a non-zero difference.
#?# Describe how would you expect a scatterplot comparing the start ends in both runs would look like - 0.5 pt
## x-axis: original run
## y-axis: re-run
# scatterplot would be completely linear with a line formed at y = x
